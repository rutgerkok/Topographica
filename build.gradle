import org.apache.tools.ant.filters.ReplaceTokens

defaultTasks "spotlessApply", 'build'

allprojects {
    version = "0.0.1-SNAPSHOT"
    group = "nl.rutgerkok.topographica"
}

buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" } // For Spotless
        jcenter() // For Shadow
    }
    dependencies {
        classpath "com.diffplug.spotless:spotless-plugin-gradle:3.24.3"
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.1.0'
    }
}

subprojects {

    repositories {
        mavenCentral()
        maven {
            url 'https://hub.spigotmc.org/nexus/content/groups/public/' // Spigot repo
        }
    }

    apply plugin: "java"
    apply plugin: "com.diffplug.gradle.spotless"
    apply plugin: "maven-publish"

    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'

    spotless { // Code formatting settings
        java {
            removeUnusedImports()
            importOrderFile rootProject.file('misc/eclipse-importorder-settings.importorder')
            trimTrailingWhitespace()
            endWithNewline()
            eclipse().configFile rootProject.file('misc/eclipse-formatting-settings.xml')
            paddedCell()
        }
    }

    processResources { // Web, config.yml and plugin.yml replacements
        filter ReplaceTokens, tokens: [
            "PROJECT_NAME": "Topographica",
            "PROJECT_SLUG": "topographica",
            "VERSION": version,
            "DATE": new Date().format('yyyy-MM-dd')
        ]
    }

    dependencies {
        testCompile 'junit:junit:4.12'
    }
    
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
        repositories {
            if (project.hasProperty('mavenUsername') && project.hasProperty('mavenPassword')) {
                maven {
                    credentials {
                        username project.mavenUsername
                        password project.mavenPassword
                    }

                    def releasesRepoUrl = "https://repo.codemc.io/repository/maven-releases/"
                    def snapshotsRepoUrl = "https://repo.codemc.io/repository/maven-snapshots/"
                    url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
                }
            }
        }
    }
}

// Web server (library, used by plugin and by standalone web server)
project(':topographica-web-shared') {
    apply plugin: "java-library"

    dependencies {
        api 'com.google.guava:guava:21.0'
        api 'com.google.code.gson:gson:2.8.0'
        implementation 'io.netty:netty-all:4.1.19.Final'
    }
}

// Web server (standalone executable)
project(':topographica-web-standalone') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies { // Must be included in JAR file
        implementation 'com.google.guava:guava:21.0'
        implementation 'io.netty:netty-all:4.1.19.Final'
        implementation project(':topographica-web-shared')
    }

    shadowJar {
        destinationDir = file("$rootDir/build/libs")
        archiveName = "Topographica-Webserver.${extension}"

        manifest {
            attributes 'Main-Class': 'nl.rutgerkok.topographica.webserver.Main'
        }
    }

    build.dependsOn(shadowJar)
}

// Spigot plugin (main)
project(':topographica-spigot') {
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compileOnly 'org.spigotmc:spigot-api:1.14.4-R0.1-SNAPSHOT'
        testImplementation 'org.spigotmc:spigot-api:1.14.4-R0.1-SNAPSHOT'
        testImplementation 'com.google.guava:guava:21.0'
        implementation project(':topographica-web-shared')
    }

    processResources { // config.yml and plugin.yml replacements
        filter ReplaceTokens, tokens: [
            "PROJECT_NAME": "Topographica",
            "VERSION": version,
            "DATE": new Date().format('yyyy-MM-dd')
        ]
    }

    shadowJar {
        dependencies {
            exclude(dependency('com.google.guava:guava'))
            exclude(dependency('com.google.code.gson:gson'))
            exclude(dependency('io.netty:netty-all'))
        }
        destinationDir = file("$rootDir/build/libs")
        archiveName = "Topographica.${extension}"
    }

    build.dependsOn(shadowJar)
}
